from langchain_core.prompts import ChatPromptTemplate
from langchain_huggingface import HuggingFacePipeline
from langchain_ollama import OllamaLLM
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline, BitsAndBytesConfig
import os, gc, psutil, shutil
import torch

# === 0) Configuration ===
MEMORY_FILE = r"D:\docaivancity\PGE2\stage\IA_CIRCB\agent_circb\interpreteur\memoire.txt"
if not os.path.exists(MEMORY_FILE):
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        f.write("")

device = "cuda" if torch.cuda.is_available() else ("mps" if torch.backends.mps.is_available() else "cpu")
dtype = torch.bfloat16 if device == "cuda" and torch.cuda.is_bf16_supported() else torch.float16 if device == "cuda" else torch.float32
print(f"[INFO] device={device} | dtype={dtype}")

# === 1) Prompts et calque ===
system_prompt = """
Tu es un expert en virologie et infectiologie sp√©cialis√© dans la prise en charge du VIH/SIDA.
√Ä partir des mutations g√©n√©tiques, des scores d'efficacit√© des antiretroviraux (ARV), et du contexte clinique du patient, g√©n√®re une interpr√©tation clinique d√©taill√©e de 150 mots maximum du g√©notype, sous forme de rapport m√©dical structur√©.
Ton analyse doit comprendre :
1. Un **cadre immunovirologique** expliquant les √©checs th√©rapeutiques pass√©s et les mutations majeures en jeu.
2. Une **analyse des r√©sistance** et des m√©dicaments encore efficaces en evocant uniquement les.
3. Une **proposition de traitement optimis√©** selon les ARV disponibles et une proposition d'association de molecules de la forme molecule1+molecule2+molecule3.
4. Un **commentaire sur l'observance** et le **suivi virologique √† pr√©voir**.
Utilise un vocabulaire m√©dical pr√©cis, sans faute, et emploie un ton professionnel.
R√©dige ta reponse en seul paragraphe.
"""

calque = """
Cadre g√©notypique compatible √† un d√©but d‚Äô√©chec √† toutes les mol√©cules du traitement antir√©troviral en cours, caract√©ris√© sp√©cifiquement par la pr√©sence de la mutation M46MI associ√©e √† la r√©sistance de faible degr√© aux IP/r (ATV/r et LPV/r) ; 
et des mutations associ√©es √† la r√©sistance de degr√©s variables aux INTIs et de degr√© √©lev√© aux INNTIs de premi√®re g√©n√©ration (EFV et NVP) y compris DOR. Toutefois, l‚ÄôAZT garde une bonne efficacit√© r√©siduelle et et TDF une efficacit√© partielle 
(tous deux favoris√©s par la mutation M184V). Par ailleurs, prenant en compte l‚Äô√©volution lente du virus (une seule mutation majeure additionnelle par rapport au g√©notype de 2000), ainsi que l‚Äôexposition relativement courte sous TLD sugg√®re 
une efficacit√© pr√©serv√©e du DTG, sous r√©serve de la confirmation par s√©quen√ßage de la r√©gion d‚Äôint√©grase.
Au regard de l‚Äôefficacit√© totale du DRV/r, de la bonne efficacit√© r√©siduelle de l‚ÄôATV/r, du LPV/r et de l‚ÄôAZT, et de l‚Äôefficacit√© partielle du TDF et ABC, dans un contexte de vir√©mie mod√©r√©e (de l‚Äôordre de 3 Log), un changement rapide de la th√©rapie est n√©cessaire, 
prenant en compte TDF*+3TC+DTG (pr√©f√©rentiellement) ou TDF*+3TC+DRV/r (alternativement).
* En cas d‚Äôusage de l‚ÄôAZT (mol√©cule ayant une bonne efficacit√© r√©siduelle contre le VIH), la pr√©sence du TDF reste indispensable dans la prise en charge du patient (pour le traitement de l‚Äôh√©patite B). 
NB : Bien qu‚Äôinefficace, la pr√©sence du 3TC permet de maintenir la mutation M184V qui √† son tour favorise l‚Äôefficacit√© du TDF tout en inhibant la r√©plication virale. 
Insister sur l‚Äôimportance de l‚Äôobservance pour la r√©ussite du traitement, √©valuer la vir√©mie plasmatique √† 12 semaines pour s‚Äôassurer de l‚Äôatteinte d‚Äôune charge virale ind√©tectable, et ensuite continuer le suivi virologique annuel selon les directives nationales. 
Une actualisation des taux de lymphocytes T CD4 serait b√©n√©fique pour la pr√©vention/surveillance des risques d‚Äô√©mergence des maladies opportunistes. 

"""

template_0 = """Voici la r√©ponse √† am√©liorer : {reponse1}
Syst√®me : {system_prompt}
Utilisateur : {user_prompt}
Am√©liore la r√©ponse en te basant sur les informations pr√©c√©dentes:
Utilise le m√™me vocabulaire que le {calque} mais en l'adaptant aux donn√©es du patient
et commence ta r√©ponsse par: " Cadre virologique compatible ou incompatible ..."
Ne rep√®te jamais le prompt dans ta r√©ponse.
R√©ponse :
"""
prompt_0 = ChatPromptTemplate.from_template(template_0)

# === 2) Initialisation Ollama ===
model_ollama = OllamaLLM(model='phi4')
chain0 = prompt_0 | model_ollama

# === 3) Gestion m√©moire ===
def liberer_ram():
    """Lib√®re la m√©moire RAM avant une op√©ration critique"""
    process = psutil.Process(os.getpid())
    mem_avant = process.memory_info().rss / 1024 / 1024  # MB
    gc.collect()
    if torch.cuda.is_available():
        try:
            torch.cuda.empty_cache()
        except:
            pass
    mem_apres = process.memory_info().rss / 1024 / 1024
    print(f"üìä M√©moire lib√©r√©e: {mem_avant - mem_apres:.1f} MB")

def cleanup_memory():
    """Nettoyer la m√©moire GPU/MPS et RAM"""
    gc.collect()
    if device == "cuda":
        try:
            torch.cuda.empty_cache()
            print("‚úÖ M√©moire CUDA nettoy√©e")
        except RuntimeError as e:
            print(f"‚ö†Ô∏è Impossible de vider le cache CUDA: {e}")
    elif device == "mps":
        try:
            torch.mps.empty_cache()
            print("‚úÖ M√©moire MPS nettoy√©e")
        except:
            print("‚ö†Ô∏è Impossible de vider le cache MPS")

# === 4) M√©moire conversationnelle ===
def read_memory():
    """Lit le contenu du fichier m√©moire"""
    if not os.path.exists(MEMORY_FILE):
        return ""
    with open(MEMORY_FILE, "r", encoding="utf-8") as f:
        return f.read()

def append_memory(user_msg, model_resp):
    """Ajoute l'interaction au fichier m√©moire"""
    with open(MEMORY_FILE, "a", encoding="utf-8") as f:
        f.write(f"\nUSER: {user_msg}\nMODEL: {model_resp}\n")


# === 5) G√©n√©ration avec am√©lioration Ollama ===
def generate_model_ollama_response(response1, user_msg: str):
    """Am√©liore la r√©ponse brute avec Ollama en respectant le calque"""
    try:
        cleanup_memory()
        memory_context = read_memory()

        # G√©n√©ration principale avec mod√®le local si pas fourni
        if not response1:
            response1 = "G√©n√®re toi m√™me tout le rapport"
        user_prompt_with_memory = f"{memory_context}\n{user_msg}"

        # Am√©lioration avec Ollama
        print("üîÑ Am√©lioration avec Ollama...")
        liberer_ram()
        result = chain0.invoke({
            "reponse1": response1,
            "system_prompt": system_prompt,
            "user_prompt": user_prompt_with_memory,
            "calque": calque,
        })

        # Normalisation en string
        if not isinstance(result, str):
            result = str(result)

        append_memory(user_msg, result)
        cleanup_memory()

        return result

    except Exception as e:
        print(f"Erreur lors de l'am√©lioration de r√©ponse : {e}")
        liberer_ram()
        cleanup_memory()
        # Retourner la r√©ponse originale sans am√©lioration
        return response1 if 'response1' in locals() else "Je suis d√©sol√©, il y a eu une erreur."
